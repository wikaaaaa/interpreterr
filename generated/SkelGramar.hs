-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelGramar where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsGramar

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsGramar.Ident -> Result
transIdent x = case x of
  AbsGramar.Ident string -> failure x

transProgram :: Show a => AbsGramar.Program' a -> Result
transProgram x = case x of
  AbsGramar.Program _ topdefs -> failure x

transTopDef :: Show a => AbsGramar.TopDef' a -> Result
transTopDef x = case x of
  AbsGramar.Fn _ fndef -> failure x
  AbsGramar.VarDef _ type_ item -> failure x

transFnDef :: Show a => AbsGramar.FnDef' a -> Result
transFnDef x = case x of
  AbsGramar.FnDef _ type_ ident args block -> failure x

transArg :: Show a => AbsGramar.Arg' a -> Result
transArg x = case x of
  AbsGramar.Arg _ type_ ident -> failure x
  AbsGramar.ArgRef _ type_ ident -> failure x

transBlock :: Show a => AbsGramar.Block' a -> Result
transBlock x = case x of
  AbsGramar.Block _ stmts -> failure x

transStmt :: Show a => AbsGramar.Stmt' a -> Result
transStmt x = case x of
  AbsGramar.Empty _ -> failure x
  AbsGramar.BStmt _ block -> failure x
  AbsGramar.Decl _ topdef -> failure x
  AbsGramar.Ass _ ident expr -> failure x
  AbsGramar.Incr _ ident -> failure x
  AbsGramar.Decr _ ident -> failure x
  AbsGramar.Ret _ expr -> failure x
  AbsGramar.VRet _ -> failure x
  AbsGramar.Cond _ expr block -> failure x
  AbsGramar.CondElse _ expr block1 block2 -> failure x
  AbsGramar.While _ expr block -> failure x
  AbsGramar.SExp _ expr -> failure x
  AbsGramar.Break _ -> failure x
  AbsGramar.Continue _ -> failure x

transItem :: Show a => AbsGramar.Item' a -> Result
transItem x = case x of
  AbsGramar.NoInit _ ident -> failure x
  AbsGramar.Init _ ident expr -> failure x

transType :: Show a => AbsGramar.Type' a -> Result
transType x = case x of
  AbsGramar.MyInt _ -> failure x
  AbsGramar.MyStr _ -> failure x
  AbsGramar.MyBool _ -> failure x
  AbsGramar.MyVoid _ -> failure x

transExpr :: Show a => AbsGramar.Expr' a -> Result
transExpr x = case x of
  AbsGramar.EVar _ ident -> failure x
  AbsGramar.ELitInt _ integer -> failure x
  AbsGramar.ELitTrue _ -> failure x
  AbsGramar.ELitFalse _ -> failure x
  AbsGramar.EApp _ ident exprs -> failure x
  AbsGramar.EString _ string -> failure x
  AbsGramar.Neg _ expr -> failure x
  AbsGramar.Not _ expr -> failure x
  AbsGramar.EMul _ expr1 mulop expr2 -> failure x
  AbsGramar.EAdd _ expr1 addop expr2 -> failure x
  AbsGramar.ERel _ expr1 relop expr2 -> failure x
  AbsGramar.EAnd _ expr1 expr2 -> failure x
  AbsGramar.EOr _ expr1 expr2 -> failure x

transAddOp :: Show a => AbsGramar.AddOp' a -> Result
transAddOp x = case x of
  AbsGramar.Plus _ -> failure x
  AbsGramar.Minus _ -> failure x

transMulOp :: Show a => AbsGramar.MulOp' a -> Result
transMulOp x = case x of
  AbsGramar.Times _ -> failure x
  AbsGramar.Div _ -> failure x
  AbsGramar.Mod _ -> failure x

transRelOp :: Show a => AbsGramar.RelOp' a -> Result
transRelOp x = case x of
  AbsGramar.LTH _ -> failure x
  AbsGramar.LE _ -> failure x
  AbsGramar.GTH _ -> failure x
  AbsGramar.GE _ -> failure x
  AbsGramar.EQU _ -> failure x
  AbsGramar.NE _ -> failure x
